[package]
name = "secret-u-optree"
description = "The core lazy AST and compiler"
authors = ["Christopher Haster <christopher.haster@arm.com>"]
version = "0.1.0"
edition = "2018"

[features]
# color slots in order to reuse slots, you probably want this
# enabled, but it can be disabled for debugging
opt-color-slots = []
# reorder branches of instruction sequences to minimize register
# pressure
opt-schedule-slots = []
# perform constant folding during compilation, note this run
# small chunks of bytecode in the vm to do the folding
opt-fold-consts = []
# fold simple nops as a part of constant folding, these are
# expressions such as x+0, x-0, x<<0, x*1, etc
opt-fold-nops = ["opt-fold-consts"]
# replace simple reductions of instruction sequences during
# constant folding
opt-simple-reductions = ["opt-fold-consts"]
# find compressed const representations, such as `u8x16.extend_const8_s 0xfe`
# instead of `u128.move_const_s 0xfffffffffffffffffffffffffffffffe`, this
# reduces bytecode size and may result in faster code
opt-compress-consts = []
# find duplicate consts in code, and deduplicate so we spend less time
# decoding consts, at the cost of higher register usage
opt-deduplicate-consts = []

# show ast before compilation
debug-ast = []
# show bytecode output by compilation
debug-bytecode = []
# check internal refs correctly return to 0, note this is very expensive
debug-check-refs = []

[dependencies]
secret-u-macros = {path = "../secret-u-macros"}
secret-u-opcode = {path = "../secret-u-opcode"}
aligned-utils = "1.0.2"
